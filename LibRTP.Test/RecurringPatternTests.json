{
  "expected_to_pass": [
    // From Old RepeatEVERY tests
    // check we dont lose the least significant part!
    {
      "name": "LeastSig-days-old",
      "pattern": "0 4 | 1 _ _ _ @ 12 _ 2 2015",
      "range": [ "01/01/1950 00:00:00", "06/01/1950 00:00:00" ],
      "expected": [ "01/01/1950 04:00:00", "02/01/1950 04:00:00", "03/01/1950 04:00:00", "04/01/1950 04:00:00", "05/01/1950 04:00:00" ]
    },
    {
      "name": "LeastSig-days",
      "pattern": "0 4 | 1 _ _ _ @ 2 _ 2 2015",
      "range": [ "10/02/2015 00:00:00", "12/02/2015 04:00:01" ],
      "expected": [ "10/02/2015 04:00:00", "11/02/2015 04:00:00", "12/02/2015 04:00:00" ]
    },
    {
      "name": "LeastSig-weeks",
      "pattern": "0 4 2 | 1 _ _ @ 2 2 2015",
      "range": [ "08/02/2015 00:00:00", "25/02/2015 00:00:00" ],
      "expected": [ "09/02/2015 04:00:00", "16/02/2015 04:00:00", "23/02/2015 04:00:00" ]
    },
    {
      "name": "LeastSig-months",
      "pattern": "0 4 3 _ | 1 _ @ 2 2014",
      "range": [ "01/01/2018 00:00:00", "02/04/2018 00:00:00" ],
      "expected": [ "03/01/2018 04:00:00", "03/02/2018 04:00:00", "03/03/2018 04:00:00" ]
    },
    // and with shifted starts (because this broke it at one point)
    {
      "name": "ShiftedStart-days",
      "pattern": "0 8 | 3 _ _ _ @ 22 _ 8 2017",
      "range": [ "23/08/2017 00:00:00", "29/08/2017 00:00:00" ],
      "expected": [ "25/08/2017 08:00:00", "28/08/2017 08:00:00" ]
    },
    {
      "name": "ShiftedStart-weeks",
      "pattern": "0 4 3 | 1 _ _ @ 2 2 2015",
      "range": [ "05/02/2015 00:00:00", "25/02/2015 04:00:01" ],
      "expected": [ "10/02/2015 04:00:00", "17/02/2015 04:00:00", "24/02/2015 04:00:00" ]
    },
    {
      "name": "ShiftedStart-months",
      "pattern": "0 4 3 _ | 1 _ @ 2 2014",
      "range": [ "20/12/2017 00:00:00", "02/04/2018 00:00:00" ],
      "expected": [ "03/01/2018 04:00:00", "03/02/2018 04:00:00", "03/03/2018 04:00:00" ]
    },
    // with complex multipliers, rather than 1.  We'll shift the starts too cause why not.
    {
      "name": "BigMult days",
      "pattern": "0 8 | 27 _ _ _ @ 22 _ 8 2017",
      "range": [ "25/08/2017 00:00:00", "16/10/2017 00:00:00" ],
      "expected": [ "18/09/2017 08:00:00", "15/10/2017 08:00:00" ]
    },
    {
      "name": "BigMult weeks",
      "pattern": "0 4 3 | 7 _ _ @ 1 2 2015",
      "range": [ "14/02/2015 00:00:00", "04/08/2015 00:00:00" ],
      "expected": [ "24/03/2015 04:00:00", "12/05/2015 04:00:00", "30/06/2015 04:00:00" ]
    },
    {
      "name": "BigMult months",
      "pattern": "0 4 3 _ | 14 _ @ 2 2014",
      "range": [ "01/06/2016 00:00:00", "01/12/2018 00:00:00" ],
      "expected": [ "03/06/2016 04:00:00", "03/08/2017 04:00:00", "03/10/2018 04:00:00" ]
    },
    {
      "name": "BigMult years",
      "pattern": "0 4 3 _ 2 | 3 @ 2020",
      "range": [ "20/12/2020 00:00:00", "02/04/2030 00:00:00" ],
      "expected": [ "03/02/2023 04:00:00", "03/02/2026 04:00:00", "03/02/2029 04:00:00" ]
    },
    // leap year handling madness
    {
      "name": "leap years",
      "pattern": "0 4 29 _ 2 | 1 @ 2012",
      "range": [ "01/01/2018 00:00:00", "02/01/2025 00:00:00" ],
      "expected": [ "29/02/2020 04:00:00", "29/02/2024 04:00:00" ]
    },
    {
      "name": "leap years negged",
      "pattern": "0 4 -1 _ 2 | 1 @ 2012",
      "range": [ "01/01/2018 00:00:00", "02/01/2022 00:00:00" ],
      "expected": [ "28/02/2018 04:00:00", "28/02/2019 04:00:00", "29/02/2020 04:00:00", "28/02/2021 04:00:00" ]
    },
    // impossible month handling
    {
      "name": "impossible month",
      "pattern": "0 0 31 _ | 1 _ @ 1 2010",
      "range": [ "01/01/2012 00:00:00", "02/05/2012 00:00:00" ],
      "expected": [ "31/01/2012 00:00:00", "31/03/2012 00:00:00" ]
    },
    {
      "name": "impossible month desired use",
      "pattern": "0 0 -1 _ | 1 _ @ 1 2010",
      "range": [ "01/01/2012 00:00:00", "02/05/2012 00:00:00" ],
      "expected": [ "31/01/2012 00:00:00", "29/02/2012 00:00:00", "31/03/2012 00:00:00", "30/04/2012 00:00:00" ]
    },
    // Crazy last handling
    {
      "name": "last day of last week of month",
      "pattern": "0 0 -1 -1 | 1 _ @ 1 2017",
      "range": [ "01/01/2017 00:00:00", "01/05/2017 00:00:00" ],
      "expected": [ "04/02/2017 00:00:00", "28/02/2017 00:00:00", "04/04/2017 00:00:00" ]
    },
    // detect long range code changes at least
    {
      "name": "long range recursion",
      "pattern": "0 0 5 | 1 _ _ @ 2 2 2015",
      "range": [ "01/01/1950 00:00:00", "21/01/1950 00:00:00" ],
      "expected": [ "05/01/1950 00:00:00", "12/01/1950 00:00:00", "19/01/1950 00:00:00" ]
    },
    // lets look more closesly at ones with occurance ranges before the fixed point
    {
      "name": "backward-days",
      "pattern": "0 4 | 2 _ _ _ @ 14 _ 2 2015",
      "range": [ "10/01/2015 00:00:00", "16/01/2015 00:00:00" ],
      "expected": [ "11/01/2015 04:00:00", "13/01/2015 04:00:00", "15/01/2015 04:00:00" ]
    },
    {
      "name": "backward-weeks",
      "pattern": "0 4 3 | 2 _ _ @ 1 2 2015",
      "range": [ "01/01/2015 00:00:00", "30/01/2015 00:00:00" ],
      "expected": [ "06/01/2015 04:00:00", "20/01/2015 04:00:00" ]
    },
    {
      "name": "backward-months",
      "pattern": "0 4 3 _ | 1 _ @ 2 2014",
      "range": [ "01/01/2012 00:00:00", "02/04/2012 00:00:00" ],
      "expected": [ "03/01/2012 04:00:00", "03/02/2012 04:00:00", "03/03/2012 04:00:00" ]
    },
    // do we support things like "on 29th day of every 6 weeks?"
    {
      "name": "BigSkip",
      "pattern": "0 4 22 | 5 _ _ @ 1 2 2014",
      "range": [ "01/01/2012 00:00:00", "02/04/2012 00:00:00" ],
      "expected": [ "03/01/2012 04:00:00", "03/02/2012 04:00:00", "03/03/2012 04:00:00" ]
    },
    // From Old RepeatON tests
    // for single concecutive pairs - pushing the last possible onindex
    {
      "name": "daymonth",
      "pattern": "0 0 28 _ | 1 _ @ 1 2015",
      "range": [ "01/01/2015 00:00:00", "01/04/2015 00:00:00" ],
      "expected": [ "28/01/2015 00:00:00", "28/02/2015 00:00:00", "28/03/2015 00:00:00" ]
    },
    {
      "name": "dayyear",
      "pattern": "0 0 365 _ _ | 1 @ 2015",
      "range": [ "01/01/2015 00:00:00", "01/01/2018 00:00:00" ],
      "expected": [ "31/12/2015 00:00:00", "30/12/2016 00:00:00", "31/12/2017 00:00:00" ]
    },
    {
      "name": "dayweek",
      "pattern": "0 0 7 | 1 _ _ @ -1 _ 2014",
      "range": [ "01/01/2015 00:00:00", "31/01/2015 00:00:00" ],
      "expected": [ "06/01/2015 00:00:00", "13/01/2015 00:00:00", "20/01/2015 00:00:00", "27/01/2015 00:00:00" ]
    },
    {
      "name": "weekmonth",
      "pattern": "0 0 1 4 | 1 _ @ 1 2015",
      "range": [ "01/01/2015 00:00:00", "01/04/2015 00:00:00" ],
      "expected": [ "22/01/2015 00:00:00", "22/02/2015 00:00:00", "22/03/2015 00:00:00" ]
    },
    {
      "name": "weekyear",
      "pattern": "0 0 1 52 _ | 1 @ 2015",
      "range": [ "01/01/2015 00:00:00", "01/01/2017 00:00:00" ],
      "expected": [ "24/12/2015 00:00:00", "23/12/2016 00:00:00" ]
    },
    {
      "name": "monthyear",
      "pattern": "0 0 1 _ 12 | 1 @ 2015",
      "range": [ "01/12/2015 00:00:00", "01/01/2018 00:00:00" ],
      "expected": [ "01/12/2015 00:00:00", "01/12/2016 00:00:00", "01/12/2017 00:00:00" ]
    },
    // Triplets
    {
      "name": "wmy",
      "pattern": "0 0 1 4 3 | 1 @ 2015",
      "range": [ "01/01/2015 00:00:00", "01/04/2017 00:00:00" ],
      "expected": [ "22/03/2015 00:00:00", "22/03/2016 00:00:00", "22/03/2017 00:00:00" ]
    },
    {
      "name": "dwm",
      "pattern": "0 0 4 4 | 1 _ @ 1 2015",
      "range": [ "01/01/2015 00:00:00", "01/04/2015 00:00:00" ],
      "expected": [ "25/01/2015 00:00:00", "25/02/2015 00:00:00", "25/03/2015 00:00:00" ]
    },
    // Quaddie
    {
      "name": "dwmy",
      "pattern": "0 0 7 4 12 | 1 @ 2015",
      "range": [ "01/01/2015 00:00:00", "01/04/2018 00:00:00" ],
      "expected": [ "28/12/2015 00:00:00", "28/12/2016 00:00:00", "28/12/2017 00:00:00" ]
    },
    // for single concecutive pairs - pushing the last possible onindex
    {
      "name": "(was)lastpossible-dm",
      "pattern": "0 0 28 _ | 2 _ @ 1 2015",
      "range": [ "01/01/2015 00:00:00", "01/04/2015 00:00:00" ],
      "expected": [ "28/01/2015 00:00:00", "28/03/2015 00:00:00" ]
    },
    {
      "name": "(was)lastpossible-dy",
      "pattern": "0 0 365 _ _ | 3 @ 2015",
      "range": [ "01/01/2015 00:00:00", "01/01/2019 00:00:00" ],
      "expected": [ "31/12/2015 00:00:00", "31/12/2018 00:00:00" ]
    },
    {
      "name": "(was)lastpossible-dw",
      "pattern": "0 0 7 | 2 _ _ @ 1 _ 2015",
      "range": [ "01/01/2015 00:00:00", "31/01/2015 00:00:00" ],
      "expected": [ "07/01/2015 00:00:00", "21/01/2015 00:00:00" ]
    },
    {
      "name": "(was)lastpossible-wm",
      "pattern": "0 0 1 4 | 3 _ @ 1 2015",
      "range": [ "01/01/2015 00:00:00", "01/05/2015 00:00:00" ],
      "expected": [ "22/01/2015 00:00:00", "22/04/2015 00:00:00" ]
    },
    {
      "name": "(was)lastpossible-wy", 
      "pattern": "0 0 1 52 _ | 1 @ 2015",
      "range": [ "01/01/2015 00:00:00", "01/01/2018 00:00:00" ],
      "expected": [ "24/12/2015 00:00:00", "23/12/2016 00:00:00", "24/12/2017 00:00:00" ]
    },
    {
      "name": "(was)lastpossible-my",
      "pattern": "0 0 1 _ 12 | 2 @ 2015",
      "range": [ "01/12/2015 00:00:00", "01/01/2018 00:00:00" ],
      "expected": [ "01/12/2015 00:00:00", "01/12/2017 00:00:00" ]
    },
    // Triplets skipping 2
    {
      "name": "skippingwmy",
      "pattern": "0 0 1 4 3 | 2 @ 2015",
      "range": [ "01/01/2015 00:00:00", "01/04/2017 00:00:00" ],
      "expected": [ "22/03/2015 00:00:00", "22/03/2017 00:00:00" ]
    },
    {
      "name": "skippingdwm",
      "pattern": "0 0 4 4 | 2 _ @ 1 2015",
      "range": [ "01/01/2015 00:00:00", "01/04/2015 00:00:00" ],
      "expected": [ "25/01/2015 00:00:00", "25/03/2015 00:00:00" ]
    },
    // Quaddie skipping 2
    {
      "name": "skippingdwmy",
      "pattern": "0 0 7 4 12 | 2 @ 2015",
      "range": [ "01/01/2015 00:00:00", "01/04/2018 00:00:00" ],
      "expected": [ "28/12/2015 00:00:00", "28/12/2017 00:00:00" ]
    },
    // MegaRangers, can e.g. repeat on 61st day of every 2 months (some hit some miss as usual)
    {
      "name": "megarange-hw",
      "pattern": "0 250 _ | 2 _ _ @ 1 _ 2015",
      "range": [ "09/01/2015 00:00:00", "25/01/2015 00:00:00" ],
      "expected": [ "10/01/2015 00:00:00", "24/01/2015 00:00:00" ]
    },
    {
      "name": "megarange-dM",
      "pattern": "0 0 61 _ | 2 _ @ 1 2015",
      "range": [ "01/01/2015 00:00:00", "01/07/2015 00:00:00" ],
      "expected": [ "30/04/2015 00:00:00", "30/06/2015 00:00:00" ]
    }
  ],

  "expected_to_fail": [
    //	public static List<OnTestCase> failedContracts = new List<OnTestCase>
    //	{
    // out of ranges
    //		new OnTestCase (
    //			new[] { 13, 1 }, RecurrSpan.Month | RecurrSpan.Year,
    //			"01/01/2015 00:00:00", "01/04/2015 00:00:00",
    //			"onIndexes[0]") { name = "lol" },
    //           new OnTestCase (
    //			new[] { 53, 1 }, RecurrSpan.Week | RecurrSpan.Year,
    //			"01/01/2015 00:00:00", "01/04/2015 00:00:00",
    //			"onIndexes[0]") { name = "lol" },
    //           new OnTestCase (
    //			new[] { 5, 1 }, RecurrSpan.Week | RecurrSpan.Month,
    //			"01/01/2015 00:00:00", "01/04/2015 00:00:00",
    //			"onIndexes[0]") { name = "lol" },
    //           new OnTestCase (
    //			new[] { 366, 1 }, RecurrSpan.Day | RecurrSpan.Year,
    //			"01/01/2015 00:00:00", "01/04/2015 00:00:00",
    //			"onIndexes[0]") { name = "lol" },
    //           new OnTestCase (
    //			new[] { 29, 1 }, RecurrSpan.Day | RecurrSpan.Month,
    //			"01/01/2015 00:00:00", "01/04/2015 00:00:00",
    //			"onIndexes[0]") { name = "lol" },
    //           new OnTestCase (
    //			new[] { 8, 1 }, RecurrSpan.Day | RecurrSpan.Week,
    //			"01/01/2015 00:00:00", "01/04/2015 00:00:00",
    //			"onIndexes[0]") { name = "lol" },
    //           new OnTestCase (
    //			new[] { 0, 1 }, RecurrSpan.Day | RecurrSpan.Month,
    //			"01/01/2015 00:00:00", "01/04/2015 00:00:00",
    //			"onIndexes[0]") { name = "lol" },

    // invalid comvinations
    //		new OnTestCase ( // too few indexes
    //			new[] { 29 }, RecurrSpan.Day | RecurrSpan.Month | RecurrSpan.Year,
    //			"01/01/2015 00:00:00", "01/04/2015 00:00:00",
    //			"unitsMask") { name = "lol" },
    //           new OnTestCase (//to many indexes
    //			new[] { 29, 29, 29, 29 }, RecurrSpan.Day | RecurrSpan.Month | RecurrSpan.Year,
    //			"01/01/2015 00:00:00", "01/04/2015 00:00:00",
    //			"unitsMask") { name = "lol" },
    //           new OnTestCase ( // mask too short/too many indexes
    //			new[] { 1,1 }, RecurrSpan.Day,
    //			"01/01/2015 00:00:00", "01/04/2015 00:00:00",
    //			"unitsMask") { name = "lol" },
    //           new OnTestCase ( // no empty indexes
    //			new int[] { }, RecurrSpan.Day,
    //			"01/01/2015 00:00:00", "01/04/2015 00:00:00",
    //			"onIndexes.Length") { name = "lol" },
    //       };
  ]
}